<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Multi-Category Quiz</title>
  <style>
    :root {
      --bg: #0b1220;
      --card: #101a33;
      --ink: #eaf0ff;
      --muted: #aab6d3;
      --accent: #6aa1ff;
      --accent-2: #9be1ff;
      --shadow: 0 10px 30px rgba(0,0,0,.35), 0 2px 8px rgba(0,0,0,.25);
    }
    html, body { height: 100%; }
    body {
      margin: 0; background: radial-gradient(1200px 800px at 30% -10%, #132240 0%, #0b1220 60%);
      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      color: var(--ink); display: grid; place-items: center; padding: 20px;
    }
    .app { width: min(900px, 96vw); }
    h1 { font-weight: 700; letter-spacing: .3px; margin: 0 0 14px; font-size: clamp(20px, 3.3vw, 32px); color: var(--accent-2); }

    .bar { display: flex; gap: 10px; align-items: center; justify-content: space-between; margin-bottom: 12px; flex-wrap: wrap; }
    .pill { background: rgba(255,255,255,.06); border: 1px solid rgba(255,255,255,.08); color: var(--muted); padding: 8px 12px; border-radius: 999px; font-size: 13px; }

    .category-selector {
      background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
      border: 1px solid rgba(255,255,255,.12);
      border-radius: 18px; padding: clamp(18px, 3.5vw, 28px);
      box-shadow: var(--shadow);
      margin-bottom: 20px;
    }
    
    .category-selector h2 {
      margin: 0 0 16px 0;
      font-size: clamp(18px, 2.5vw, 24px);
      color: var(--accent);
    }
    
    .category-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 12px;
    }
    
    .category-btn {
      background: linear-gradient(180deg, rgba(106,161,255,.15), rgba(106,161,255,.08));
      border: 1px solid rgba(255,255,255,.12);
      border-radius: 12px;
      padding: 16px;
      text-align: center;
      cursor: pointer;
      transition: all 0.2s ease;
      font-weight: 600;
    }
    
    .category-btn:hover {
      background: linear-gradient(180deg, rgba(106,161,255,.25), rgba(106,161,255,.15));
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0,0,0,.3);
    }
    
    .category-btn.selected {
      background: linear-gradient(180deg, rgba(155,225,255,.25), rgba(155,225,255,.15));
      border-color: var(--accent-2);
    }

    .card {
      background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
      border: 1px solid rgba(255,255,255,.12);
      border-radius: 18px; padding: clamp(18px, 3.5vw, 28px);
      box-shadow: var(--shadow);
      transition: transform .2s ease, box-shadow .2s ease;
    }
    .card:active { transform: scale(.998); box-shadow: 0 6px 18px rgba(0,0,0,.35); }

    .q { font-size: clamp(20px, 3vw, 28px); line-height: 1.3; margin: 0; }
    .a { margin-top: 14px; font-size: clamp(18px, 2.3vw, 22px); color: #d6f2ff; display: none; }
    .a.show { display: block; }

    .controls { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px; margin-top: 16px; }
    button {
      -webkit-tap-highlight-color: transparent;
      appearance: none; cursor: pointer; user-select: none;
      border: 1px solid rgba(255,255,255,.14); color: var(--ink);
      background: linear-gradient(180deg, rgba(106,161,255,.22), rgba(106,161,255,.12));
      border-radius: 14px; padding: 12px 14px; font-size: 15px; font-weight: 600;
      box-shadow: var(--shadow); transition: transform .1s ease, filter .2s ease, background .2s ease;
    }
    button:hover { filter: brightness(1.05); }
    button:active { transform: translateY(1px) scale(.998); }
    .ghost { background: rgba(255,255,255,.06); }

    .row { display: flex; gap: 10px; align-items: center; flex-wrap: wrap; margin-top: 10px; }
    .row label { font-size: 14px; color: var(--muted); display: flex; align-items: center; gap: 8px; }

    .progress { margin-top: 8px; font-size: 13px; color: var(--muted); display: flex; justify-content: space-between; align-items: center; }
    .kbd { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace; font-size: 12px; color: #cfe1ff; opacity: .9; }

    .hidden { display: none; }

    @media (max-width: 520px) {
      .controls { grid-template-columns: 1fr; }
      .row { gap: 14px; }
      .category-grid { grid-template-columns: 1fr; }
    }
  </style>
</head>
<body>
  <div class="app">
    <!-- Category Selector -->
    <div class="category-selector" id="categorySelector">
      <h2>Choose a Quiz Category</h2>
      <div class="category-grid" id="categoryGrid">
        <div class="category-btn">Loading categories...</div>
      </div>
    </div>

    <!-- Quiz Interface -->
    <div class="hidden" id="quizInterface">
      <div class="bar">
        <h1 id="quizTitle">Quick‑Fire Quiz</h1>
        <div class="pill"><span id="counter">Loading...</span></div>
      </div>

      <div class="card" id="card" aria-live="polite">
        <p class="q" id="q">Loading…</p>
        <p class="a" id="a"><strong>Answer:</strong> <span id="answerText"></span></p>
      </div>

      <div class="controls" aria-label="Controls">
        <button id="prev" title="Previous (←)">◀ Prev</button>
        <button id="toggle" class="ghost" title="Show/Hide Answer (Space)">Show Answer</button>
        <button id="next" title="Next (→)">Next ▶</button>
      </div>

      <div class="row">
        <label><input type="checkbox" id="startRandom" checked> Start in random order</label>
        <label><input type="checkbox" id="looping" checked> Loop at ends</label>
        <button id="reshuffle" class="ghost" title="Reshuffle order (R)">Reshuffle</button>
        <button id="restart" class="ghost">Restart</button>
        <button id="backToCategories" class="ghost">← Back to Categories</button>
      </div>

      <div class="progress">
        <div>Shortcuts: <span class="kbd">←/→</span> prev/next, <span class="kbd">Space</span> show, <span class="kbd">R</span> reshuffle</div>
        <div class="kbd">Tip: Click the card to toggle the answer.</div>
      </div>
    </div>
  </div>

  <script>
    // === CSV PARSER ===
    function parseCSV(csv) {
      const lines = csv.split('\n');
      const headers = lines[0].split(',').map(h => h.replace(/"/g, ''));
      const data = [];
      
      for (let i = 1; i < lines.length; i++) {
        if (lines[i].trim() === '') continue;
        
        const values = [];
        let current = '';
        let inQuotes = false;
        
        for (let j = 0; j < lines[i].length; j++) {
          const char = lines[i][j];
          
          if (char === '"') {
            inQuotes = !inQuotes;
          } else if (char === ',' && !inQuotes) {
            values.push(current.trim());
            current = '';
          } else {
            current += char;
          }
        }
        values.push(current.trim());
        
        const row = {};
        headers.forEach((header, index) => {
          row[header] = values[index] ? values[index].replace(/^"|"$/g, '') : '';
        });
        data.push(row);
      }
      
      return data;
    }

    // === APP STATE ===
    let QA = [];
    let currentCategory = '';
    let availableCategories = [];
    
    // DOM Elements
    const categorySelector = document.getElementById('categorySelector');
    const categoryGrid = document.getElementById('categoryGrid');
    const quizInterface = document.getElementById('quizInterface');
    const quizTitle = document.getElementById('quizTitle');
    const qEl = document.getElementById('q');
    const aEl = document.getElementById('a');
    const answerText = document.getElementById('answerText');
    const counterEl = document.getElementById('counter');
    const btnPrev = document.getElementById('prev');
    const btnNext = document.getElementById('next');
    const btnToggle = document.getElementById('toggle');
    const btnReshuffle = document.getElementById('reshuffle');
    const btnRestart = document.getElementById('restart');
    const btnBackToCategories = document.getElementById('backToCategories');
    const startRandom = document.getElementById('startRandom');
    const looping = document.getElementById('looping');
    const card = document.getElementById('card');

    let order = [];
    let idx = 0;

    // === CATEGORY DETECTION ===
    async function detectCategories() {
      // List of common CSV filenames to try
      const commonNames = [
        'general.csv', 'science.csv', 'history.csv', 'geography.csv', 
        'math.csv', 'literature.csv', 'movies.csv', 'music.csv',
        'sports.csv', 'food.csv', 'animals.csv', 'nature.csv',
        'technology.csv', 'art.csv', 'politics.csv', 'economics.csv',
        'biology.csv', 'chemistry.csv', 'physics.csv', 'astronomy.csv',
        'quiz_questions.csv', 'questions.csv', 'trivia.csv', 'quiz.csv'
      ];
      
      const detectedCategories = [];
      
      for (const filename of commonNames) {
        try {
          const response = await fetch(filename);
          if (response.ok) {
            const categoryName = filename.replace('.csv', '').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            detectedCategories.push({
              filename: filename,
              name: categoryName,
              url: filename
            });
          }
        } catch (error) {
          // File doesn't exist, continue to next
        }
      }
      
      // Also try to detect any CSV files by making a request to a directory listing
      // This is a fallback method that might work in some server configurations
      try {
        const response = await fetch('./');
        if (response.ok) {
          const text = await response.text();
          const csvMatches = text.match(/href="([^"]*\.csv)"/g);
          if (csvMatches) {
            csvMatches.forEach(match => {
              const filename = match.match(/href="([^"]*\.csv)"/)[1];
              if (!detectedCategories.find(cat => cat.filename === filename)) {
                const categoryName = filename.replace('.csv', '').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                detectedCategories.push({
                  filename: filename,
                  name: categoryName,
                  url: filename
                });
              }
            });
          }
        }
      } catch (error) {
        // Directory listing not available, that's okay
      }
      
      return detectedCategories;
    }

    // === CATEGORY SELECTION ===
    function showCategorySelector() {
      categorySelector.classList.remove('hidden');
      quizInterface.classList.add('hidden');
      currentCategory = '';
      QA = [];
    }

    function showQuizInterface() {
      categorySelector.classList.add('hidden');
      quizInterface.classList.remove('hidden');
    }

    function createCategoryButtons(categories) {
      if (categories.length === 0) {
        categoryGrid.innerHTML = `
          <div class="category-btn" style="grid-column: 1 / -1; color: var(--muted);">
            No CSV files found. Please add CSV files to this folder.<br>
            <small>Files should be named like: general.csv, science.csv, etc.</small>
          </div>
        `;
        return;
      }

      categoryGrid.innerHTML = categories.map(category => `
        <div class="category-btn" data-filename="${category.filename}">
          <div style="font-size: 18px; margin-bottom: 4px;">${category.name}</div>
          <div style="font-size: 12px; color: var(--muted);">${category.filename}</div>
        </div>
      `).join('');

      // Add click handlers
      categoryGrid.querySelectorAll('.category-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const filename = btn.dataset.filename;
          loadCategory(filename);
        });
      });
    }

    // === LOAD CATEGORY ===
    async function loadCategory(filename) {
      try {
        const response = await fetch(filename);
        if (!response.ok) {
          throw new Error(`Failed to load ${filename}`);
        }
        
        const csvText = await response.text();
        const csvData = parseCSV(csvText);
        
        // Convert CSV data to the expected format
        QA = csvData.map(row => {
          // Handle different possible column names
          const question = row.Question || row.question || row.Q || row.q || Object.values(row)[0];
          const answer = row.Answer || row.answer || row.A || row.a || Object.values(row)[1];
          return { q: question, a: answer };
        }).filter(qa => qa.q && qa.a); // Filter out empty entries
        
        if (QA.length === 0) {
          throw new Error('No valid questions found in CSV file');
        }
        
        currentCategory = filename.replace('.csv', '').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        quizTitle.textContent = currentCategory;
        
        showQuizInterface();
        setOrder(true);
        render(true);
        enableControls();
        
      } catch (error) {
        console.error('Error loading category:', error);
        alert(`Error loading ${filename}: ${error.message}`);
      }
    }

    function enableControls() {
      btnNext.disabled = false;
      btnPrev.disabled = false;
      btnToggle.disabled = false;
      btnReshuffle.disabled = false;
      btnRestart.disabled = false;
    }

    function shuffle(arr){
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function setOrder(randomize) {
      order = [...Array(QA.length).keys()];
      if (randomize) shuffle(order);
      idx = 0;
    }

    function render(hideAnswer = true) {
      if (QA.length === 0) return;
      
      const qa = QA[ order[idx] ];
      qEl.textContent = qa.q;
      answerText.textContent = qa.a;
      if (hideAnswer) aEl.classList.remove('show');
      counterEl.textContent = `${idx+1} / ${QA.length}`;
    }

    function next() {
      if (idx < order.length - 1) { idx++; render(); }
      else if (looping.checked) { idx = 0; render(); }
    }

    function prev() {
      if (idx > 0) { idx--; render(); }
      else if (looping.checked) { idx = order.length - 1; render(); }
    }

    function toggleAnswer() {
      aEl.classList.toggle('show');
      btnToggle.textContent = aEl.classList.contains('show') ? 'Hide Answer' : 'Show Answer';
    }

    // Events
    btnNext.addEventListener('click', next);
    btnPrev.addEventListener('click', prev);
    btnToggle.addEventListener('click', toggleAnswer);
    btnReshuffle.addEventListener('click', () => { setOrder(true); render(true); });
    btnRestart.addEventListener('click', () => { setOrder(startRandom.checked); render(true); });
    btnBackToCategories.addEventListener('click', showCategorySelector);
    card.addEventListener('click', toggleAnswer);

    window.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') { e.preventDefault(); next(); }
      else if (e.key === 'ArrowLeft') { e.preventDefault(); prev(); }
      else if (e.key === ' ' || e.code === 'Space') { e.preventDefault(); toggleAnswer(); }
      else if (e.key.toLowerCase() === 'r') { e.preventDefault(); setOrder(true); render(true); }
      else if (e.key === 'Escape') { e.preventDefault(); showCategorySelector(); }
    });

    // Initialize
    async function init() {
      try {
        const categories = await detectCategories();
        availableCategories = categories;
        createCategoryButtons(categories);
      } catch (error) {
        console.error('Error initializing:', error);
        categoryGrid.innerHTML = `
          <div class="category-btn" style="grid-column: 1 / -1; color: var(--muted);">
            Error loading categories. Please check your CSV files.
          </div>
        `;
      }
    }

    init();
  </script>
</body>
</html>
```

Now I'll create a few example CSV files to demonstrate how the system works:

```csv:general.csv
Question,Answer
"What do cows drink?","Water"
"What is the opposite of day?","Night"
"What do you put in a toaster?","Bread"
"What's 2 + 2?","4"
"What colour do you get by mixing blue and yellow?","Green"
```

```csv:science.csv
Question,Answer
"What is H₂O commonly called?","Water"
"What gas do we need to breathe to live?","Oxygen"
"What do plants need from the sun to grow?","Sunlight"
"What planet do we live on?","Earth"
"What is the name of our natural satellite?","The Moon"
```

```csv:animals.csv
Question,Answer
"What animal says ""moo""?","Cow"
"What animal says ""woof""?","Dog"
"What animal says ""meow""?","Cat"
"How many legs does a spider have?","8"
"How many legs does a cat have?","4"
```

## Key Features of the Updated Quiz:

### 🎯 **Automatic Category Detection**
- Scans for CSV files in the same folder
- Tries common naming patterns (general.csv, science.csv, etc.)
- Attempts directory listing as a fallback

### 🎨 **Category Selection Interface**
- Beautiful grid layout showing all available categories
- Category names are automatically formatted (e.g., "general.csv" → "General")
- Shows both category name and filename

### 🔄 **Flexible CSV Format**
- Works with different column names: Question/Answer, question/answer, Q/A, etc.
- Automatically detects the first two columns as question and answer
- Filters out empty entries

### 🎮 **Enhanced Navigation**
- "Back to Categories" button to switch between quizzes
- Escape key to return to category selection
- All original keyboard shortcuts still work

### 📱 **Responsive Design**
- Works on mobile and desktop
- Category grid adapts to screen size
- Maintains the original beautiful styling

## How to Use:

1. **Place CSV files** in the same folder as the HTML file
2. **Name your files** descriptively (e.g., `science.csv`, `history.csv`, `movies.csv`)
3. **Format your CSV** with Question and Answer columns
4. **Open the HTML file** in a browser
5. **Select a category** and start quizzing!

## Example CSV Structure:
```csv
Question,Answer
"What is the capital of France?","Paris"
"What is 5 + 3?","8"
```

The system will automatically detect your CSV files and create categories based on the filenames. You can have as many different quiz categories as you want!
